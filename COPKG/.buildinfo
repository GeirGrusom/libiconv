@import "version.inc";

#define {
    NewVersion : "${package-version++}";
}

#product-info  {
    product-name: "libiconv";
    version: "1.14";
    original-source-location: "http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.14.tar.gz";
    original-source-website: "http://www.gnu.org/software/libiconv/";
    license: "LGPL, exe under GPL";
    packager: "Eric Schultz";
}

test {
    set: PLAT="${PLAT??x86, x64}";
    default : false;
    uses: release;
    build-command: @"
        pushd COPKG
        for %%A in (${PLAT}) do (
            call RunTests.bat %%A || goto failed
        )
        popd
    ";
};

package {
    
    default : false;
    uses : sign;
    
    targets: { 
//        @"copkg\libiconv[vc6]-${NewVersion}-x86.msi",
        @"copkg\libiconv[vc10]-${NewVersion}-x86.msi",
        @"copkg\libiconv-dev[vc10]-${NewVersion}-x86.msi",
        @"copkg\libiconv-dev-common-${NewVersion}-any.msi",
        @"copkg\libiconv[vc10]-${NewVersion}-x64.msi",
        @"copkg\libiconv-dev[vc10]-${NewVersion}-x64.msi"
    };
    
    build-command : @"
        if ""${noversion}"" neq ""true"" ptk update-version
        cd COPKG
        autopackage libiconv-dev-common.autopkg || goto failed
        autopackage libiconv[vc10]-x86.autopkg libiconv-dev[vc10]-x86.autopkg || goto failed
        autopackage libiconv[vc10]-x64.autopkg libiconv-dev[vc10]-x64.autopkg || goto failed
REM		autopackage libiconv[vc6]-x86.autopkg || goto failed
    ";

	clean-command: @"del COPKG\*.msi COPKG\*.wixpdb";
	
};


update-version {
    default : false;
    
    build-command : @"
        REM auto-increment version.inc file...
        
        cd COPKG
        setlocal EnableDelayedExpansion
        set VERSTRING=#define { package-version: ${NewVersion}; }
        echo !VERSTRING! > version.inc
    ";
}

release {
    set: BuildCfg="Release";
    uses: x86;
    uses: x64;
//	uses: mingw;
};

sign {
    default : false;
    uses: release;
    build-command: @"simplesigner.exe --nologo --sign output\vc10\x64\Release\**.dll output\vc10\x86\Release\**.dll";
};


mingw {
	compiler: "mingw";

	default: false;
 
    targets: {
		@"mingw-build\lib\.libs\libiconv-2.dll",
		@"mingw-build\lib\.libs\libiconv.dll.a",
		@"mingw-build\lib\.libs\libiconv.lib",
	};
 
    build-command: @"
	if ""${BUILT}"" equ ""true"" goto end
	mkdir mingw-build
	cd mingw-build
	sh '../configure'
    make
	copy lib\.libs\libiconv.dll.a lib\.libs\libiconv.lib
:end
    ";
            // either a single command line, or a batch script 
            // that has the commands to build the targets listed above.
 
    clean-command: @"
	rd /s /q mingw-build
    ";
}

x86 {
    compiler: vc10;
    platform: x86;

 
    targets: {
        @"output\vc10\x86\Release\libiconv.lib",
        @"output\vc10\x86\Release\libiconv.dll",
        @"output\vc10\x86\Release\libiconvtest.exe",
        @"output\vc10\x86\Release\table-to.exe",
        @"output\vc10\x86\Release\table-from.exe",
		@"output\vc10\x86\Release\uniq-u.exe"
    };


    build-command: @"
		if ""${BUILT}"" equ ""true"" goto end
        REM this makes it so that DLLs can have their own SxS Activation Context in an embedded resource.
		echo %_CL% | findstr ISOLATION_AWARE || set _CL=%CL% /D ISOLATION_AWARE_ENABLED /U NOUSER

        msbuild /p:Platform=win32 /p:Configuration=Release COPKG\libiconv\libiconv.sln
        copy output\vc10\x86\Release\libiconv.lib output\vc10\x86\Release\libiconv.dll.a 
:end
    ";
 
    clean-command: @"
        rmdir Release /S /Q
        rmdir COPKG\libiconv\ipch /S /Q
		rmdir COPKG\libiconv\Release /S /Q
        pushd COPKG
        del /S /Q /A - *.sdf *.suo *.user *.exe *.pdb > NUL 2> NUL
        popd
    ";
}

x64 {
    compiler: vc10;
    platform: x64;

 
    targets: {
        @"output\vc10\x64\Release\libiconv.lib",
        @"output\vc10\x64\Release\libiconv.dll",
        @"output\vc10\x64\Release\libiconvtest.exe",
        @"output\vc10\x64\Release\table-to.exe",
        @"output\vc10\x64\Release\table-from.exe",
		@"output\vc10\x64\Release\uniq-u.exe"
    };


    build-command: @"
		if ""${BUILT}"" equ ""true"" goto end
        REM this makes it so that DLLs can have their own SxS Activation Context in an embedded resource.
		echo %_CL% | findstr ISOLATION_AWARE || set _CL=%CL% /D ISOLATION_AWARE_ENABLED /U NOUSER

        msbuild /p:Platform=x64 /p:Configuration=Release COPKG\libiconv\libiconv.sln
        copy output\vc10\x64\Release\libiconv.lib output\vc10\x64\Release\\libiconv.dll.a
:end
    ";
 
    clean-command: @"
        rmdir Release /S /Q
        rmdir COPKG\libiconv\ipch /S /Q
		rmdir COPKG\libiconv\Release /S /Q

        pushd COPKG
        del /S /Q /A - *.sdf *.suo *.user *.exe *.pdb > NUL 2> NUL
        popd
    ";
}

